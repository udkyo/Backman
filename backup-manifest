#!/usr/bin/python3

import urllib.request
import sys
import subprocess
import re
import os
import tempfile
import xml.etree.ElementTree as ET
import argparse
import logging
from zipfile import ZipFile

workdir = os.getcwd()
outdir = tempfile.TemporaryDirectory()

# logger setup - I've made the assuption that only basic unstructured logging
# is required for the purpose of this exercise
logging.basicConfig(filename='backup-manifest.log', level=logging.INFO)
logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler())


class CloneError(Exception):
    # A CloneError is raised if the repo cannot be downloaded
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return repr(self.value)


def get_args():
    """ Handle command line arguments

    """
    parser = argparse.ArgumentParser(
        description='Clone and zip projects from a gerrit manifest')
    parser.add_argument('source',
                        help='a gerrit manifest')
    parser.add_argument('dest',
                        help='the output zipfile')
    return(parser.parse_args())


def get_remotes():
    """ Returns a dict containing all remotes in the manifest in the format:

    {
        'repo1': 'https://example.com/repo1'
        'repo2': 'https://example.com/repo2'
    }

    """
    return {
        remote.attrib['name']: remote.attrib['fetch']
        for remote in root.iter('remote')
    }


def clone_project(remote, name, branch):
    """ Clones a project from a named remote, and checks out the specified branch

    """
    logger.info('cloning {}/{}'.format(name, branch))
    if(os.path.isdir('{}/{}'.format(outdir.name, name))):
        logger.debug("{}/{} already exists".format(outdir.name, name))
        return 0
    url = remotes[remote] + name
    dest = '{}/{}'.format(outdir.name, name)
    # cant pass a SHA in via -b, instead I've opted to clone and checkout.
    cmd = subprocess.run(
        'git clone {} {} && cd {}/{} && git checkout {}'.format(
            url, dest, outdir.name, name, branch
        ), shell=True)
    if(cmd.returncode == 0):
        return cmd.returncode
    else:
        raise CloneError('Failed to get {}'.format(name))


def compress_output():
    """ Compresses combined output - manifest file plus all cloned repos.

    """
    logger.info('compressing output')
    try:
        with ZipFile(args.dest, 'w') as z:
            os.chdir(outdir.name)
            for folderName, subfolders, filenames in os.walk('.'):
                for filename in filenames:
                    path = os.path.join(folderName, filename)
                    z.write(path)
            os.chdir(workdir)
    except Exception as e:
        logger.fatal("couldn't compress output - {}".format(e))


def process_projects():
    """ Loop through and clone each project, then call
    compress_output to compresses the combined output

    """
    for project in root.iter('project'):
        print("\nprocessing {}".format(project.attrib['name']))
        branch = project.attrib['revision'] if 'revision' in project.attrib else "master"
        try:
            clone_project(
                project.attrib['remote'], project.attrib['name'], branch)
        except CloneError as _:
            logger.warning(
                'failed to clone: {}'.format(project.attrib['name']))
    compress_output()


def get_manifest(path):
    """ Get a manifest from a remote URL or local file

    """
    logger.info('getting manifest')
    if(re.search(r'^https?:\/\/', path)):
        filename = path[path.rfind("/") + 1:]
        localfile = "{}/{}".format(outdir.name, filename)
        logger.info(
            "fetching remote manifest: {} to {}".format(path, localfile))
        try:
            urllib.request.urlretrieve(
                url=path, filename="{}".format(localfile))
        except urllib.error.HTTPError as e:
            logger.fatal('manifest download failed. {}'.format(e))
            sys.exit(1)
        return localfile
    elif(os.path.isfile(path)):
        logger.info('using local manifest: {}'.format(path))
        return path
    else:
        logger.fatal('manifest not found: {}'.format(path))
        sys.exit(1)


if __name__ == '__main__':
    args = get_args()
    manifest = get_manifest(args.source)
    tree = ET.parse(manifest)
    root = tree.getroot()
    remotes = get_remotes()
    args = get_args()
    logger.info(
        '----------------------------------------------------------------------')
    logger.info('processing: outdir={}'.format(outdir.name))

    process_projects()

    outdir.cleanup()
